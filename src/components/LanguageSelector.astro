---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import i18next from "i18next";
import { localizePath } from "astro-i18next";
import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
    showFlag?: boolean;
    animate?: boolean;
    showTitle?: boolean;
    placement?: string;
    buttonId: string;
    dropdownId: string;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;
const { pathname } = Astro.url;
const { showFlag = false, animate = true, showTitle = true, placement="bottom", dropdownId, buttonId, ...attributes } = Astro.props;
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};
---

<div class="language-selector">
    <button class:list={["dropdown", {"menu-hover-effect": animate}]} data-dropdown-target={`#${dropdownId}`} data-dropdown-placement={placement} id={buttonId}>
        {(showFlag ? localeEmoji(currentLanguage) + " " : "") + (showTitle ? capitalizeFirstLetter(ISO6991.getNativeName(currentLanguage)): "")}
    </button>
    <ul class="dropdown-content" id={dropdownId} data-js-current-language={currentLanguage}>
        {
            supportedLanguages.map((supportedLanguage: string) => {
                let value = localizePath(pathname, supportedLanguage);
                const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(supportedLanguage));
                const flag = showFlag ? localeEmoji(supportedLanguage) + " " : "";
                const label = flag + nativeName;

                return (
                    <li>
                        <a href={value} data-js-language={supportedLanguage}>
                            <span>{label}</span>
                            <i class={supportedLanguage == currentLanguage ? "fa fa-check" : ""} aria-hidden="true" />
                        </a>
                    </li>
                );
            })
        }
    </ul>
</div>

<script>
    const languageSelector = document.querySelectorAll("[data-js-language]");
    languageSelector.forEach((selector) => {
        selector.addEventListener("click", function (e) {
            let currectSelector = e.target as HTMLAnchorElement;
            let selectedLanguage = currectSelector.getAttribute("data-js-language");
            if (selectedLanguage === null) {
                console.error("Could not find 'data-js-language' attribute.");
                return;
            }
            window.localStorage.setItem("language", selectedLanguage);
        });
    });
</script>

<style>
    span,
    i {
        pointer-events: none;
    }

    .language-selector {
        display: flex;
        justify-content: center;
        font-size: 1rem;
        position: relative;
        height: 60px;
    }

    button {
        background-color: transparent;
        color: var(--accent-color);
        font-family: inherit;
        border: none;
        transition: all 200ms;
        cursor: pointer;
        font-size: inherit;
        text-transform: uppercase;
        font-weight: 600;
        position: relative;
        padding: 0;
    }

    button::after {
        display: inline-block;
        margin-left: 0.255em;
        vertical-align: 0.255em;
        content: "";
        border-top: 0.3em solid;
        border-right: 0.3em solid transparent;
        border-bottom: 0;
        border-left: 0.3em solid transparent;
    }
</style>
