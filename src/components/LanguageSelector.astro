---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import i18next from "i18next";
import { localizePath } from "astro-i18next";
import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
    showFlag?: boolean;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;
const { pathname } = Astro.url;
const { showFlag = false, id, ...attributes } = Astro.props;
---

<div class="language-selector">
    <select {...attributes} data-js-current-language={currentLanguage}>
        {
            supportedLanguages.map((supportedLanguage: string) => {
                let value = localizePath(pathname, supportedLanguage);
                const flag = showFlag ? localeEmoji(supportedLanguage) + " " : "";
                const nativeName = ISO6991.getNativeName(supportedLanguage);
                const label = flag + nativeName;
                return (
                    <option value={value} selected={supportedLanguage === currentLanguage} data-js-language={supportedLanguage} title={label}>
                        {label}
                    </option>
                );
            })
        }
    </select>
</div>

<script>
    const languageSelector = document.querySelectorAll(".language-selector > select");
    languageSelector.forEach((selector) => {
        selector.addEventListener("change", function (e) {
            let currectSelector = e.target as HTMLSelectElement;
            let selectedLanguage = currectSelector[currectSelector.selectedIndex].getAttribute("data-js-language");
            if (selectedLanguage === null) {
                console.error("Could not find 'data-js-language' attribute.");
                return;
            }
            window.localStorage.setItem("language", selectedLanguage);
            window.location.href = currectSelector.value;
        });
    });
</script>

<style>
    .language-selector {
        display: flex;
        justify-content: center;
    }

    .language-selector > select {
        font-weight: 600;
        font-size: 0.9rem;
        height: calc(38/1rem);
        padding-left: 1rem;
        padding-right: 1rem;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        background-color: var(--light);
        color: var(--button-color);
        font-family: sans-serif;
        text-transform: uppercase;
        border: 2px solid var(--accent-color);
        border-radius: 34px;
        transition: all 200ms;
        cursor: pointer;
    }

    .language-selector > select > option {
        font-weight: 400;
        font-family: inherit;
        font-size: 1rem;
        text-transform: capitalize;
    }

    .language-selector > select:is(:focus, :hover, :focus-visible) {
        outline: none;
        font-weight: 600;
        color: var(--button-hover-color);
        border: 2px solid transparent;
        background-color: var(--button-bg);
    }
</style>
