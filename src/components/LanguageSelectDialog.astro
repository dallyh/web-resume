---
import ModalDialog from "./ModalDialog.astro";
import { localizePath } from "astro-i18next";
import i18next, { i18n, t } from "i18next";
import ISO6991 from "iso-639-1";
import localeEmoji from "locale-emoji";


const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;
const { pathname } = Astro.url;
const modalTitle = t("languagePopup:PopupTitle");
const closeButtonText = t("shared:PopupClose");
const currentnativeLanguage = ISO6991.getNativeName(i18next.language);

const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};
---

<ModalDialog dialogId="languageSelectDialog" modalTitle={modalTitle} closeButtonText={closeButtonText}>
    <div class="lang-select-dialog-body" slot="body">
        <p>{t("languagePopup:PopupBody")}<span style="text-transform: capitalize; font-weight: 600;"> {currentnativeLanguage} {localeEmoji(currentLanguage)}</span>.</p>
        <div class="dialog-languages" data-js-current-language={currentLanguage}>
            {
                supportedLanguages.map((supportedLanguage: string) => {
                    let value = localizePath(pathname, supportedLanguage);
                    const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(supportedLanguage));
                    const flag = localeEmoji(supportedLanguage) + " ";
                    const label = flag + nativeName;
    
                    return (
                            <a href={value} data-js-language={supportedLanguage}>
                                <span>{label}</span>
                            </a>
                    );
                })
            }
        </div>
        
        <!-- <LanguageSelector showFlag={true} buttonId="modalLanguageDropdownButton" dropdownId="modalLanguageDropdown" /> -->
    </div>
</ModalDialog>

<style>
    .lang-select-dialog-body p {
        margin-bottom: 1rem;
    }

    .dialog-languages {
        display: flex;
        justify-content: center; 
    }

    .dialog-languages a {
        height: 25px;
        width: max-content;
        position: relative;
        margin-right: 10px;
    }

    .dialog-languages span {
        pointer-events: none;
    }

</style>

<script>
    import AstroI18nextConfig from "../../astro-i18next.config.mjs";

    const basePath = import.meta.env.BASE_URL;
    const path = window.location.pathname;
    const url = window.location.origin;
    const defaultLanguage = AstroI18nextConfig.defaultLocale;
    const languageSelect = document.querySelector("dialog-languages") as HTMLElement;

    // Check for changes on links
    const languageSelectorLinks = document.querySelectorAll("[data-js-language]");
    languageSelectorLinks.forEach((selector) => {
        selector.addEventListener("click", function (e) {
            let currectSelector = e.target as HTMLAnchorElement;
            let selectedLanguage = currectSelector.getAttribute("data-js-language");
            if (selectedLanguage === null) {
                console.error("Could not find 'data-js-language' attribute.");
                return;
            }
            window.localStorage.setItem("language", selectedLanguage);
        });
    });

    // Check for locale in path
    const checkPathLocale = (language: string) => {
        let currentPathArray = path.split("/");
        if (currentPathArray[1] !== basePath) {
            // Check for base path and determine which index to use
            if (language === currentPathArray[1]) {
                // If it's empty (base path is "/" - path.split ends up with nothing on this index)
                return true;
            }
        } else {
            if (language === currentPathArray[2]) {
                return true;
            }
        }

        return false;
    };

    // Transfer user if theres a value in local storage
    const redirectUser = () => {
        let language = window.localStorage.getItem("language") as string;

        // Check for deafult langugage
        if (language === defaultLanguage){
            language = "";
        }
        // Check for locale in URL, do not redirect here, when user is already on selected language
        if (checkPathLocale(language)) return;

        // Redirection
        if (language !== null) {
            let redirectionUrl = "";
            if (basePath !== null) {
                redirectionUrl = url + basePath + language;
            } else {
                redirectionUrl = url + "/" + language + path;
            }
            window.location.href = redirectionUrl;        
        }
    };

    // Open dialog if there is no selected language
    // Redirect if there is already a language
    const languageDialog = document.querySelector("#languageSelectDialog") as HTMLDialogElement;
    window.addEventListener("DOMContentLoaded", () => {
        if (window.localStorage.getItem("language") === null) {
            languageDialog.showModal();
        } else {
            redirectUser();
        }
    });

    // Check for cancel button
    languageDialog.addEventListener("close", () => {
        let currentLanguage = languageSelect.getAttribute("data-js-current-language");

        if (currentLanguage === null) {
            console.error("Could not find 'data-js-current-language' attribute.");
            return;
        }
        if (languageDialog.returnValue === "cancel") {
            window.localStorage.setItem("language", currentLanguage);
        }
    });
</script>
