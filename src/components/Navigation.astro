---
import LanguageSelector from "./LanguageSelector.astro";
import ThemeToggle from "./ThemeToggle.astro";
import i18next, { t, changeLanguage } from "i18next";
---

<div class="header-container">
    <header class="header">
        <div class="header-burger-menu">
            <div class="header-burger-menu-button">
                <span></span>
            </div>
        </div>
        <p>{`${t("shared:NamePossesive")} ${t("shared:Resume")}`}</p>
        <div class="header-menu">
            <a href="#about" class="header-menu-item menu-hover-effect active">
                <span>01</span>{t("navigation:Nav_Intro")}
            </a>
            <a href="#skills" class="header-menu-item menu-hover-effect">
                <span>02</span>{t("navigation:Nav_Skills")}
            </a>
            <a href="#certifications" class="header-menu-item menu-hover-effect">
                <span>03</span>{t("navigation:Nav_Certifications")}
            </a>
            <a href="#experience" class="header-menu-item menu-hover-effect">
                <span>04</span>{t("navigation:Nav_Experience")}
            </a>
            <a href="#contact" class="header-menu-item menu-hover-effect">
                <span>05</span>{t("navigation:Nav_Contact")}
            </a>
        </div>
        <div class="header-user-settings">
            <ThemeToggle />
            <LanguageSelector showFlag={true} buttonId="headerLanguageDropdownButton" dropdownId="headerLanguageDropdown" />
        </div>
    </header>
</div>

<div class="nav-container">
    <aside class="aside">
        <div class="contact-info">
            <p>Dalibor Hon</p>
            <a href="https://www.linkedin.com/in/dalibor-hon/" target="_blank">
                <i class="fa-brands fa-linkedin"></i>
                LinkedIn
            </a>
        </div>
        <div class="aside-menu">
            <a href="#about" class="aside-menu-item menu-hover-effect active">
                <span>01</span>{t("navigation:Nav_Intro")}
            </a>
            <a href="#skills" class="aside-menu-item menu-hover-effect">
                <span>02</span>{t("navigation:Nav_Skills")}
            </a>
            <a href="#certifications" class="aside-menu-item menu-hover-effect">
                <span>03</span>{t("navigation:Nav_Certifications")}
            </a>
            <a href="#experience" class="aside-menu-item menu-hover-effect">
                <span>04</span>{t("navigation:Nav_Experience")}
            </a>
            <a href="#contact" class="aside-menu-item menu-hover-effect">
                <span>05</span>{t("navigation:Nav_Contact")}
            </a>
        </div>
        <div class="aside-user-settings">
            <ThemeToggle />
            <LanguageSelector showFlag={true} animate={false} buttonId="asideLanguageDropdownButton" dropdownId="asideLanguageDropdown" />
        </div>
    </aside>
</div>

<style>
    .nav-container {
        display: none;
    }

    .header-container {
        position: sticky;
        top: 0px;
        display: flex;
        justify-content: center;
        z-index: 999;
        height: 60px;
        width: 100vw;
        background-color: var(--header-bg);
        transition: transform 400ms ease;
        box-shadow: 0px 0.5px 6px 0px rgba(0, 0, 0, 0.2);
        margin-bottom: 1.5rem;
    }

    header {
        --border: 1px;
        width: var(--page-width);
        height: inherit;
        display: flex;
        justify-content: space-between;
        gap: 1em;
        align-items: center;
    }

    .header-burger-menu {
        display: none;
    }

    .header-container.hidden header::before {
        opacity: 0;
    }

    .aside-close-button {
        display: none;
    }

    header p {
        color: var(--accent-color);
        font-size: 1.2rem;
        font-weight: 400;
        display: block;
        padding: 0rem 0rem 0rem 1.5rem;
    }

    .header-menu {
        font-size: 1rem;
        display: flex;
        gap: 2rem;
        position: relative;
        height: inherit;
        padding: 0rem 1rem 0rem 1rem;
    }

    .header-user-settings {
        display: flex;
        gap: 1rem;
        padding: 0rem 1.5rem 0rem 1rem;
    }

    .header-menu-item {
        height: inherit;
        width: 100%;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        white-space: nowrap;
        font-weight: 600;
        letter-spacing: 0px;
        text-transform: uppercase;
        text-decoration: none;
        position: relative;
    }
    .header-menu-item:hover {
        text-decoration: none;
    }

    .header-menu-item > span {
        color: var(--body-color);
    }

    .header-menu .header-menu-item a {
    }

    @media (max-width: 980px) {
        body:not(.nav-active) .header-container.hidden {
            transform: translateY(-100%);
        }

        header .header-menu,
        header .header-user-settings {
            display: none;
        }

        header p {
            display: block !important;
            margin-right: 1.5rem;
        }

        .header-burger-menu {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 2.125rem;
            margin-top: auto;
            margin-bottom: auto;
            margin-left: 1rem;
        }

        .header-burger-menu-button {
            position: relative;
            height: 26px;
            width: 40px;
            cursor: pointer;
            background-color: transparent;
        }

        .header-burger-menu-button > span {
            pointer-events: none;
        }

        .header-burger-menu-button.active span {
            opacity: 0;
        }

        .header-burger-menu-button.active.header-burger-menu-button::before,
        .header-burger-menu-button.active.header-burger-menu-button::after {
            top: 40%;
        }

        .header-burger-menu-button.active.header-burger-menu-button::before {
            transform: rotate(45deg);
        }

        .header-burger-menu-button.active.header-burger-menu-button::after {
            transform: rotate(-45deg);
        }

        .header-burger-menu-button span,
        .header-burger-menu-button::before,
        .header-burger-menu-button::after {
            display: block;
            position: absolute;
            height: 5px;
            width: 100%;
            background-color: var(--burger-menu-bg);
            border-radius: 6px;
            opacity: 1;
        }

        .header-burger-menu-button::before,
        .header-burger-menu-button::after {
            content: "";
            transition: top 0.35s cubic-bezier(0.23, 1, 0.32, 1), transform 0.35s cubic-bezier(0.23, 1, 0.32, 1);
        }

        .header-burger-menu-button span {
            top: 50%;
            transform: translateY(-50%);
        }

        .header-burger-menu-button::before {
            top: 0;
        }

        .header-burger-menu-button::after {
            bottom: 0;
        }

        .nav-container {
            display: block;
            position: fixed;
            height: 100%;
            width: 250px;
            flex-direction: column;
            z-index: 998;
            top: 0;
            background-color: var(--header-bg);
            transition: transform 400ms ease;
            /* box-shadow: 0px 0.5px 6px 0px rgba(0, 0, 0, 0.2); */
            transform: translateX(-100%);
        }

        body.nav-active .nav-container {
            transform: translateX(0%);
        }

        body.nav-active .header-burger-menu {
            transform: translateX(-60px);
        }

        :global(.page-wrapper) {
            transition: all 400ms ease;
        }

        :global(body.nav-active .page-wrapper) {
            transform: translateX(250px);
            pointer-events: none;
        }

        :global(html:has(body.nav-active)) {
            overflow: hidden;
        }

        body.nav-active .header-container {
            box-shadow: none;
            transform: translateX(240px);
        }

        aside {
            display: flex;
            justify-content: space-between;
            height: inherit;
            width: unset;
            gap: 1rem;
            align-items: center;
            flex-direction: column;
            position: relative;
        }

        aside::before {
            opacity: 0;
            content: "";
            position: absolute;
            height: 40px;
            width: 40px;
            top: 60px;
            right: -40px;
            background: radial-gradient(circle at bottom right, transparent 70%, var(--header-bg) 71%);
            transition: opacity 400ms ease;
        }

        body.nav-active aside::before {
            opacity: 1;
        }

        aside .contact-info {
            display: flex;
            flex-direction: column;
        }

        aside .contact-info a {
            margin-top: 1rem;
            align-self: center;
        }

        aside p {
            color: var(--accent-color);
            font-size: 1.2rem;
            font-weight: 400;
            display: block;
            padding-top: 5rem;
        }

        aside .aside-menu {
            display: flex;
            flex-direction: column;
            height: unset;
            padding: unset;
            margin-left: 1rem;
            gap: 1rem;
        }

        aside .aside-menu-item {
            height: 40px;
            width: 100%;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            white-space: nowrap;
            text-transform: uppercase;
            font-weight: 900;
            font-size: 1.1rem;
            letter-spacing: 2px;
        }

        aside .aside-menu-item {
            text-decoration: none;
        }

        aside .aside-menu-item > span {
            color: var(--body-color);
        }

        aside .aside-user-settings {
            display: flex;
            margin-left: 1rem;
            padding-bottom: 5rem;
            flex-direction: column-reverse;
        }

        aside .aside-close-button {
            position: absolute;
            display: block;
            padding: 0.55rem;
            line-height: 1px;
            font-size: 3rem;
            right: 0;
            top: 0;
            cursor: pointer;
        }

        aside .menu-hover-effect::before {
            content: "";
            position: absolute;
            height: 100%;
            width: 2px;
            background-color: var(--menu-hover-bg);
            bottom: 0px;
            left: -15%;
            right: 0;
            transform: scale(0);
            transition: transform 200ms;
        }
    }

    @media (max-width: 1240px) {
        header p {
            display: none;
        }
    }
</style>

<script>
    import Hammer from "hammerjs";
    class SideNav {
        constructor() {
            this.initSideNav();
            console.log("Navigation initialized.");
        }

        private initSideNav(): void {
            // Sidebar navigation
            const pageContainer = document.querySelector(".page-wrapper") as HTMLDivElement;
            const navButton = document.querySelector(".header-burger-menu-button") as HTMLDivElement;
            const navigation = document.querySelector(".nav-container") as HTMLElement;
            const sections = document.querySelectorAll("section");
            const headerNavLinks = document.querySelectorAll(".header-menu > .header-menu-item");
            const asideNavLinks = document.querySelectorAll(".aside-menu > .aside-menu-item");
            //const deviceHeight = window.innerHeight > 0 ? window.innerHeight : screen.height;

            /**
             * Opens/closes navigation menu.
             */
            const openCloseNav = () => {
                navButton.classList.toggle("active");
                document.body.classList.toggle("nav-active");
            };

            /**
             * Closes navigation menu
             */
            const closeNav = () => {
                if (document.body.classList.contains("nav-active")) {
                    navButton.classList.remove("active");
                    document.body.classList.remove("nav-active");
                }
            };

            /**
             * Opens navigation menu
             */
            const openNav = () => {
                if (document.body.classList.contains("nav-active") == false) {
                    navButton.classList.add("active");
                    document.body.classList.add("nav-active");
                }
            };

            /**
             * https://stackoverflow.com/questions/4620906/how-do-i-know-when-ive-stopped-scrolling
             */
            const waitForScrollEnd = () => {
                let last_changed_frame = 0;
                let last_x = window.scrollX;
                let last_y = window.scrollY;

                return new Promise<void>((resolve) => {
                    function tick(frames: number) {
                        // We requestAnimationFrame either for 500 frames or until 20 frames with
                        // no change have been observed.
                        if (frames >= 500 || frames - last_changed_frame > 20) {
                            resolve();
                        } else {
                            if (window.scrollX != last_x || window.scrollY != last_y) {
                                last_changed_frame = frames;
                                last_x = window.scrollX;
                                last_y = window.scrollY;
                            }
                            requestAnimationFrame(tick.bind(null, frames + 1));
                        }
                    }
                    tick(0);
                });
            };

            /**
             * Removes active attribude from all sections and navigation
             */
            const removeAttributesOnScroll = (activeSection: Element, activeNavLink?: HTMLAnchorElement) => {
                sections.forEach((section) => {
                    if (section !== activeSection) section.removeAttribute("data-js-active");
                });

                if (activeNavLink === undefined) return;

                headerNavLinks.forEach((navLink) => {
                    if (navLink !== activeNavLink) {
                        if (navLink.classList.contains("active")) navLink.classList.remove("active");
                    }
                });
            };

            /**
             * Sets active attribute to clicked navigation link
             */
            const navAnchorClick = () =>
                headerNavLinks.forEach((navLink) => {
                    navLink.addEventListener("click", (e) => {
                        let anchorLink = e.target as HTMLAnchorElement;
                        let href = anchorLink.getAttribute("href");
                        if (href === null) return;

                        let section = document.querySelector(href);
                        if (section !== null) {
                            section.setAttribute("data-js-active", "");
                            navLink.classList.add("active");
                        }

                        waitForScrollEnd().then(() => {
                            if (section !== null) removeAttributesOnScroll(section, anchorLink);
                        });
                    });
                });

            // ScrollSpy
            /**
             * Watches for attribute changes and sets active class to nav element
             */
            const scrollSpy = () => {
                sections.forEach((section) => {
                    if (!section.hasAttribute("data-js-intersecting")) return;

                    let targetHeaderLink = document.querySelector(`.header-menu-item[href="#${section.id}"]`) as HTMLElement;
                    if (targetHeaderLink === null) {
                        console.warn("Scroll target for header was not found.");
                        return;
                    }
                    targetHeaderLink.classList.add("active");

                    let targetAsideLink = document.querySelector(`.aside-menu-item[href="#${section.id}"]`) as HTMLElement;
                    if (targetAsideLink === null) {
                        console.warn("Scroll target for aside was not found.");
                        return;
                    }
                    targetAsideLink.classList.add("active");

                    section.setAttribute("data-js-active", "");

                    removeAttributesOnScroll(section);

                    // Remove active class from other
                    headerNavLinks.forEach((link) => {
                        if (link !== targetHeaderLink) {
                            if (link.classList.contains("active")) link.classList.remove("active");
                        }
                    });

                    asideNavLinks.forEach((link) => {
                        if (link !== targetAsideLink) {
                            if (link.classList.contains("active")) link.classList.remove("active");
                        }
                    });
                });
            };

            /**
             * Hides header on scroll
             */
            var prevScrollpos = window.pageYOffset;
            var headerDiv = document.querySelector(".header-container") as HTMLElement;
            const hideHeader = () => {
                //var headerBottom = headerDiv.offsetTop + headerDiv.offsetHeight;
                window.onscroll = function () {
                    var currentScrollPos = window.pageYOffset;

                    /* if scrolling down, let it scroll out of view as normal */
                    if (prevScrollpos <= currentScrollPos) {
                        headerDiv.classList.add("hidden");
                    } else {
                        /* otherwise if we're scrolling up, fix the nav to the top */
                        headerDiv.classList.remove("hidden");
                    }

                    prevScrollpos = currentScrollPos;
                };
            };

            // Hammertime (swipe gestures for nav menu)
            const hammerTime = () => {
                //@ts-ignore -- removes the default user-select:none from HammerJS init.
                delete Hammer.defaults.cssProps.userSelect;
                let hammertime = new Hammer(document.body);
                hammertime.get("swipe").set({ direction: Hammer.DIRECTION_HORIZONTAL });
                hammertime.on("swipe", function (ev) {
                    if (ev.direction === 4) {
                        // Swipe right
                        openNav();
                    }

                    if (ev.direction === 2) {
                        // Swipe left
                        closeNav();
                    }
                });
            };

            // Init scrollspy
            window.addEventListener("scroll", (e) => {
                scrollSpy();
            });

            // Collapse responsive navbar on click outside or on its child items
            // https://stackoverflow.com/questions/50359249/bootsrap-v4-1-closing-a-collapse-menu-when-clicking-outside-of-div
            document.addEventListener("click", function (click) {
                let container = navigation;
                if (click.target instanceof HTMLElement) {
                    if (click.target === navButton) return;
                    if (click.target instanceof HTMLInputElement) return;
                    if (click.target === container || container.contains(click.target)) {
                        if (click.target instanceof HTMLAnchorElement) closeNav();

                        return;
                    }
                    closeNav();
                }
            });

            // Init other functions
            window.addEventListener("DOMContentLoaded", () => {
                // Assign function to burger menu for navbar open
                navButton.addEventListener("click", (e) => {
                    e.preventDefault();
                    openCloseNav();
                });
                navAnchorClick();
                hideHeader();
                hammerTime();

                // Scroll to element on page load if location contains hash
                if (window.location.hash !== "") {
                    var el = document.querySelector(window.location.hash);
                    setTimeout(function () {
                        if (el) {
                            //el.scrollIntoView();
                        }
                    }, 800); // The timeout has to be here, no idea why but without this the scrollIntoView does not work
                }
            });
        }
    }
    export default new SideNav();
</script>
